{"version":3,"file":"static/js/637.bf76ff25.chunk.js","mappings":"uPA8GEA,EAAAA,GAOF,WAAeC,EAAAA,EAAAA,IAAQ,KAAM,CAACD,WAAAA,EAAAA,IAA9B,EA3FA,YAA2C,EAAxBE,SAAyB,IAAfF,EAAc,EAAdA,WACrBG,EAdR,WAA2C,IAApBC,EAAmB,uDAAJ,GACpC,GAA0BC,EAAAA,EAAAA,UAASD,GAAnC,eAAOE,EAAP,KAAcC,EAAd,KAEA,MAAO,CACLC,KAAM,CACJF,MAAAA,EACAG,SAAU,SAAAC,GAAC,OAAIH,EAASG,EAAEC,OAAOL,MAAtB,GAEbA,MAAO,kBAAMA,EAAMM,MAAZ,EACPC,MAAO,kBAAMN,EAAS,GAAf,EAEV,CAGeO,CAAc,IACtBC,GAAYC,EAAAA,EAAAA,QAAO,MACzB,GAA8CX,EAAAA,EAAAA,WAAS,GAAvD,eAAOY,EAAP,KAAwBC,EAAxB,KAGA,GAAwBb,EAAAA,EAAAA,WAAS,GAAjC,eAAOc,EAAP,KAAaC,EAAb,KACMC,EAAc,kBAAMD,GAAQ,EAAd,EAIpB,GAA0Bf,EAAAA,EAAAA,UAAS,IAAIiB,MAAvC,eAAOhB,EAAP,KAAcG,EAAd,KAiBA,OACE,iCACE,kBAAMc,OAAO,IAAIC,UAAU,OAAOC,SAjBtC,SAAuBC,GAErB,GADAA,EAAMC,iBACHxB,EAAMG,QAOP,OALAH,EAAMU,aACNb,EAAW,CACT4B,MAAOzB,EAAMG,QACbuB,WAAW,IAIfd,EAAUe,QAAQC,QAClBb,GAAmB,EACpB,EAIG,WACE,UAAC,IAAD,YACE,SAAC,aAAD,QACEc,YAAY,WACZ,aAAW,uBACX,mBAAiB,eACjBC,IAAKlB,EACLmB,QAAS,kBAAMhB,GAAmB,EAAzB,GACLf,EAAMK,QAEZ,SAAC,IAAD,CACE2B,GAAG,gBACHC,QAAQ,oBACRC,QAnCS,kBAAMjB,GAAQ,EAAd,EAgCX,UAKE,SAAC,IAAD,CAAMkB,KAAM,QAEd,SAAC,IAAD,CACEF,QAAQ,kBACRG,KAAK,SAFP,qBAQF,iBAAMf,UAAS,UAAKP,EAAkB,YAAc,YAArC,gBAAf,8CAEF,SAAC,WAAD,WACE,UAAC,IAAD,CAAOE,KAAMA,EAAMqB,OAAQnB,EAA3B,WACE,SAAC,WAAD,CAAcoB,aAAW,EAAzB,UACE,SAAC,UAAD,+BAEF,SAAC,SAAD,WACE,0BACE,SAAC,KAAD,CAAUhC,SAAUA,EAAUH,MAAOA,SAGzC,UAAC,WAAD,YACE,SAAC,IAAD,CAAQ8B,QAAQ,YAAYC,QAAShB,EAArC,oBAGA,SAAC,IAAD,CAAQe,QAAQ,UAAUC,QAAShB,EAAnC,oCAQX,G","sources":["Todo/AddTodo.js"],"sourcesContent":["import React, { useState, useRef } from \"react\"\r\nimport PropTypes from 'prop-types'\r\nimport Button from 'react-bootstrap/Button'\r\nimport Form from 'react-bootstrap/Form'\r\nimport InputGroup from 'react-bootstrap/InputGroup'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport Calendar from 'react-calendar';\r\nimport { Plus } from 'react-bootstrap-icons'\r\nimport 'react-calendar/dist/Calendar.css'\r\nimport {connect} from 'react-redux'\r\nimport { createTodo } from '../redux/actions'\r\n\r\n//Custom Hook\r\nfunction useInputValue(defaultValue = '') {\r\n  const [value, setValue] = useState(defaultValue)\r\n\r\n  return {\r\n    bind: {\r\n      value,\r\n      onChange: e => setValue(e.target.value)\r\n    },\r\n    value: () => value.trim(),\r\n    clear: () => setValue(''),\r\n  }\r\n}\r\n\r\nfunction AddTodo({ onCreate, createTodo }) {\r\n  const input = useInputValue('')\r\n  const textInput = useRef(null)\r\n  const [invalidFeedback, setInvalidFeedback] = useState(false)\r\n\r\n  //\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  //\r\n  const [value, onChange] = useState(new Date());\r\n\r\n  function submitHandler(event) {\r\n    event.preventDefault()\r\n    if(input.value()) {\r\n      //onCreate(input.value())\r\n      input.clear()\r\n      createTodo({\r\n        title: input.value(),\r\n        completed: false\r\n      })\r\n      return\r\n    }\r\n    textInput.current.focus();\r\n    setInvalidFeedback(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form action=\"#\" className=\"mb-1\" onSubmit={submitHandler} >\r\n        <InputGroup>\r\n          <Form.Control\r\n            placeholder=\"Input...\"\r\n            aria-label=\"Recipient's username\"\r\n            aria-describedby=\"basic-addon2\"\r\n            ref={textInput}\r\n            onInput={() => setInvalidFeedback(false)}\r\n            {...input.bind}\r\n          />\r\n          <Button\r\n            id=\"button-addon2\"\r\n            variant=\"outline-secondary\"\r\n            onClick={handleShow}\r\n          >\r\n            <Plus size={16}/>\r\n          </Button>\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            type=\"submit\"\r\n            // disabled={!input.value()}\r\n          >\r\n            Add\r\n          </Button>\r\n        </InputGroup>\r\n        <span className={`${invalidFeedback ? 'opacity-1' : 'opacity-0'} text-danger`} >The field must not be empty!</span>\r\n      </form>\r\n      <Modal.Dialog>\r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Modal heading</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <div>\r\n              <Calendar onChange={onChange} value={value} />\r\n            </div>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={handleClose}>\r\n              Save Changes\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </Modal.Dialog>\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = {\r\n  createTodo\r\n}\r\n\r\nAddTodo.propTypes = {\r\n  //onCreate: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(null, {createTodo})(AddTodo)\r\n"],"names":["createTodo","connect","onCreate","input","defaultValue","useState","value","setValue","bind","onChange","e","target","trim","clear","useInputValue","textInput","useRef","invalidFeedback","setInvalidFeedback","show","setShow","handleClose","Date","action","className","onSubmit","event","preventDefault","title","completed","current","focus","placeholder","ref","onInput","id","variant","onClick","size","type","onHide","closeButton"],"sourceRoot":""}